
ATmega328p_SPItoAnalog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000950  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000732  00000000  00000000  00000b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001614  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c5  00000000  00000000  00001a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001c48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <SPI_init>:
		_delay_ms(50);
	}
}

void SPI_init(void){
	DDRB = (1<<MOSI) | (1<<SCK) |  (1<<CS_sensor) | (1<<CS_DAC) | (0<<MISO);		//se habilitan las salidas necesarias en el puerto B
  80:	8e e2       	ldi	r24, 0x2E	; 46
  82:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE) | (0<<DORD) | (1<<MSTR) | (1<<CPOL) | (1<<CPHA) | (0<<SPR0) | (0<<SPR1);	//se habilita comunicación SPI como maestro y SCK = CLK/2 = 4MHz
  84:	8c e5       	ldi	r24, 0x5C	; 92
  86:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPI2X);
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	8d bd       	out	0x2d, r24	; 45
	PORTB |= (1<<CS_sensor) | (1<<CS_DAC); //Se inicializan CS_sensor y CS_DAC en estado alto
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	86 60       	ori	r24, 0x06	; 6
  90:	85 b9       	out	0x05, r24	; 5
  92:	08 95       	ret

00000094 <transmitSPIbyte>:
}

void transmitSPIbyte(uint8_t dataT){
	//Se carga el byte al registro SPDR
	SPDR = dataT;
  94:	8e bd       	out	0x2e, r24	; 46
	//Se espera hasta que se haga el envio
	while (!(SPSR & (1 << SPIF)));
  96:	0d b4       	in	r0, 0x2d	; 45
  98:	07 fe       	sbrs	r0, 7
  9a:	fd cf       	rjmp	.-6      	; 0x96 <transmitSPIbyte+0x2>
}
  9c:	08 95       	ret

0000009e <receiveSPIbyte>:

uint8_t receiveSPIbyte(void){
	//Se manda un byte fiticio para luego recibir datos
	SPDR = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8e bd       	out	0x2e, r24	; 46
	//Se espera a que se haga la recepción
	while (!(SPSR & (1 << SPIF)));
  a2:	0d b4       	in	r0, 0x2d	; 45
  a4:	07 fe       	sbrs	r0, 7
  a6:	fd cf       	rjmp	.-6      	; 0xa2 <receiveSPIbyte+0x4>
	//Se retorna el valor del registro SPDR
	return SPDR;
  a8:	8e b5       	in	r24, 0x2e	; 46
  aa:	08 95       	ret

000000ac <main>:
uint8_t receiveSPIbyte(void);

int main(void)
{
	/*Se habilita la comunicación SPI*/
	SPI_init();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <SPI_init>
	uint16_t data = 0;

	while (1)
	{
		/*Lectura del sensor*/
		PORTB &= ~(1<<CS_sensor);	
  b0:	85 b1       	in	r24, 0x05	; 5
  b2:	8b 7f       	andi	r24, 0xFB	; 251
  b4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	22 e0       	ldi	r18, 0x02	; 2
  b8:	2a 95       	dec	r18
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0xc>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x12>
		_delay_us(1);
		HighByte = receiveSPIbyte();	//se recibe el pimer byte	(MSByte)
  be:	0e 94 4f 00 	call	0x9e	; 0x9e <receiveSPIbyte>
  c2:	c8 2f       	mov	r28, r24
		LowByte = receiveSPIbyte();	//se recibe el segundo byte (LSByte)
  c4:	0e 94 4f 00 	call	0x9e	; 0x9e <receiveSPIbyte>
		PORTB |= (1<<CS_sensor);
  c8:	95 b1       	in	r25, 0x05	; 5
  ca:	94 60       	ori	r25, 0x04	; 4
  cc:	95 b9       	out	0x05, r25	; 5
  ce:	92 e0       	ldi	r25, 0x02	; 2
  d0:	9a 95       	dec	r25
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x24>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x2a>
		_delay_us(1);
		
		/*En LowByte los primeros 3 bits no aportan información
		y se hace una operación OR para obtener los 12 bits de la temperatura en data */
		data = (HighByte << 5) | (LowByte >> 3);
  d6:	20 e2       	ldi	r18, 0x20	; 32
  d8:	c2 9f       	mul	r28, r18
  da:	e0 01       	movw	r28, r0
  dc:	11 24       	eor	r1, r1
  de:	86 95       	lsr	r24
  e0:	86 95       	lsr	r24
  e2:	86 95       	lsr	r24
  e4:	c8 2b       	or	r28, r24
		data |= DAC;	//se utiliza DAC para habilitar los bits necesarios
  e6:	d0 63       	ori	r29, 0x30	; 48
  e8:	85 e8       	ldi	r24, 0x85	; 133
  ea:	8a 95       	dec	r24
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x3e>
  ee:	00 00       	nop
		LowByteDAC = data&0xFF;
		
		_delay_us(50);
		
		/*Envio de datos hacia el MCP4921 (DAC)*/
		PORTB &= ~(1<<CS_DAC);
  f0:	85 b1       	in	r24, 0x05	; 5
  f2:	8d 7f       	andi	r24, 0xFD	; 253
  f4:	85 b9       	out	0x05, r24	; 5
  f6:	92 e0       	ldi	r25, 0x02	; 2
  f8:	9a 95       	dec	r25
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x4c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x52>
		_delay_us(1);
		transmitSPIbyte(HighByteDAC);
  fe:	8d 2f       	mov	r24, r29
 100:	0e 94 4a 00 	call	0x94	; 0x94 <transmitSPIbyte>
		transmitSPIbyte(LowByteDAC);
 104:	8c 2f       	mov	r24, r28
 106:	0e 94 4a 00 	call	0x94	; 0x94 <transmitSPIbyte>
		PORTB |= (1<<CS_DAC);
 10a:	85 b1       	in	r24, 0x05	; 5
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	85 b9       	out	0x05, r24	; 5
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	2a 95       	dec	r18
 114:	f1 f7       	brne	.-4      	; 0x112 <main+0x66>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x6c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f e7       	ldi	r24, 0x7F	; 127
 11a:	98 e3       	ldi	r25, 0x38	; 56
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	20 40       	sbci	r18, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x72>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x7c>
 128:	00 00       	nop
 12a:	c2 cf       	rjmp	.-124    	; 0xb0 <main+0x4>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
